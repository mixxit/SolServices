//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SolModel", "FK_dbPlayer_dbAccount", "dbAccounts", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbAccount), "dbPlayers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbPlayer), true)]
[assembly: EdmRelationshipAttribute("SolModel", "FK_dbBiomeTile_dbBiome", "dbBiomes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbBiome), "dbBiomeTiles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbBiomeTile), true)]
[assembly: EdmRelationshipAttribute("SolModel", "FK_dbBiomeTile_dbTile", "dbTiles", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbTile), "dbBiomeTiles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbBiomeTile), true)]
[assembly: EdmRelationshipAttribute("SolModel", "FK_dbCelestial_dbCelestialType", "dbCelestialTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbCelestialType), "dbCelestials", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbCelestial), true)]
[assembly: EdmRelationshipAttribute("SolModel", "FK_dbLocations_dbCelestial", "dbCelestials", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbCelestial), "dbLocations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbLocation), true)]
[assembly: EdmRelationshipAttribute("SolModel", "FK_dbLocations_dbTile", "dbTiles", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbTile), "dbLocations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbLocation), true)]
[assembly: EdmRelationshipAttribute("SolModel", "FK_dbPlayer_dbLocation", "dbLocations", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbLocation), "dbPlayers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbPlayer), true)]
[assembly: EdmRelationshipAttribute("SolModel", "FK_Tile_TileType", "dbTileTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SolService.dbTileType), "dbTiles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SolService.dbTile), true)]

#endregion

namespace SolService
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SolEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SolEntities object using the connection string found in the 'SolEntities' section of the application configuration file.
        /// </summary>
        public SolEntities() : base("name=SolEntities", "SolEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SolEntities object.
        /// </summary>
        public SolEntities(string connectionString) : base(connectionString, "SolEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SolEntities object.
        /// </summary>
        public SolEntities(EntityConnection connection) : base(connection, "SolEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbAccount> dbAccounts
        {
            get
            {
                if ((_dbAccounts == null))
                {
                    _dbAccounts = base.CreateObjectSet<dbAccount>("dbAccounts");
                }
                return _dbAccounts;
            }
        }
        private ObjectSet<dbAccount> _dbAccounts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbBiome> dbBiomes
        {
            get
            {
                if ((_dbBiomes == null))
                {
                    _dbBiomes = base.CreateObjectSet<dbBiome>("dbBiomes");
                }
                return _dbBiomes;
            }
        }
        private ObjectSet<dbBiome> _dbBiomes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbBiomeTile> dbBiomeTiles
        {
            get
            {
                if ((_dbBiomeTiles == null))
                {
                    _dbBiomeTiles = base.CreateObjectSet<dbBiomeTile>("dbBiomeTiles");
                }
                return _dbBiomeTiles;
            }
        }
        private ObjectSet<dbBiomeTile> _dbBiomeTiles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbCelestial> dbCelestials
        {
            get
            {
                if ((_dbCelestials == null))
                {
                    _dbCelestials = base.CreateObjectSet<dbCelestial>("dbCelestials");
                }
                return _dbCelestials;
            }
        }
        private ObjectSet<dbCelestial> _dbCelestials;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbCelestialTypeBiome> dbCelestialTypeBiomes
        {
            get
            {
                if ((_dbCelestialTypeBiomes == null))
                {
                    _dbCelestialTypeBiomes = base.CreateObjectSet<dbCelestialTypeBiome>("dbCelestialTypeBiomes");
                }
                return _dbCelestialTypeBiomes;
            }
        }
        private ObjectSet<dbCelestialTypeBiome> _dbCelestialTypeBiomes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbCelestialType> dbCelestialTypes
        {
            get
            {
                if ((_dbCelestialTypes == null))
                {
                    _dbCelestialTypes = base.CreateObjectSet<dbCelestialType>("dbCelestialTypes");
                }
                return _dbCelestialTypes;
            }
        }
        private ObjectSet<dbCelestialType> _dbCelestialTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbLocation> dbLocations
        {
            get
            {
                if ((_dbLocations == null))
                {
                    _dbLocations = base.CreateObjectSet<dbLocation>("dbLocations");
                }
                return _dbLocations;
            }
        }
        private ObjectSet<dbLocation> _dbLocations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbPlayer> dbPlayers
        {
            get
            {
                if ((_dbPlayers == null))
                {
                    _dbPlayers = base.CreateObjectSet<dbPlayer>("dbPlayers");
                }
                return _dbPlayers;
            }
        }
        private ObjectSet<dbPlayer> _dbPlayers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbTile> dbTiles
        {
            get
            {
                if ((_dbTiles == null))
                {
                    _dbTiles = base.CreateObjectSet<dbTile>("dbTiles");
                }
                return _dbTiles;
            }
        }
        private ObjectSet<dbTile> _dbTiles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dbTileType> dbTileTypes
        {
            get
            {
                if ((_dbTileTypes == null))
                {
                    _dbTileTypes = base.CreateObjectSet<dbTileType>("dbTileTypes");
                }
                return _dbTileTypes;
            }
        }
        private ObjectSet<dbTileType> _dbTileTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<sysdiagram> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagram>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbAccounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbAccounts(dbAccount dbAccount)
        {
            base.AddObject("dbAccounts", dbAccount);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbBiomes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbBiomes(dbBiome dbBiome)
        {
            base.AddObject("dbBiomes", dbBiome);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbBiomeTiles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbBiomeTiles(dbBiomeTile dbBiomeTile)
        {
            base.AddObject("dbBiomeTiles", dbBiomeTile);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbCelestials EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbCelestials(dbCelestial dbCelestial)
        {
            base.AddObject("dbCelestials", dbCelestial);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbCelestialTypeBiomes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbCelestialTypeBiomes(dbCelestialTypeBiome dbCelestialTypeBiome)
        {
            base.AddObject("dbCelestialTypeBiomes", dbCelestialTypeBiome);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbCelestialTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbCelestialTypes(dbCelestialType dbCelestialType)
        {
            base.AddObject("dbCelestialTypes", dbCelestialType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbLocations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbLocations(dbLocation dbLocation)
        {
            base.AddObject("dbLocations", dbLocation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbPlayers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbPlayers(dbPlayer dbPlayer)
        {
            base.AddObject("dbPlayers", dbPlayer);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbTiles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbTiles(dbTile dbTile)
        {
            base.AddObject("dbTiles", dbTile);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dbTileTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodbTileTypes(dbTileType dbTileType)
        {
            base.AddObject("dbTileTypes", dbTileType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the sysdiagrams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTosysdiagrams(sysdiagram sysdiagram)
        {
            base.AddObject("sysdiagrams", sysdiagram);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbAccount")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbAccount : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbAccount object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="password">Initial value of the password property.</param>
        /// <param name="email">Initial value of the email property.</param>
        /// <param name="guid">Initial value of the guid property.</param>
        public static dbAccount CreatedbAccount(global::System.Int32 id, global::System.String name, global::System.String password, global::System.String email, global::System.Guid guid)
        {
            dbAccount dbAccount = new dbAccount();
            dbAccount.id = id;
            dbAccount.name = name;
            dbAccount.password = password;
            dbAccount.email = email;
            dbAccount.guid = guid;
            return dbAccount;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String password
        {
            get
            {
                return _password;
            }
            set
            {
                OnpasswordChanging(value);
                ReportPropertyChanging("password");
                _password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("password");
                OnpasswordChanged();
            }
        }
        private global::System.String _password;
        partial void OnpasswordChanging(global::System.String value);
        partial void OnpasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String email
        {
            get
            {
                return _email;
            }
            set
            {
                OnemailChanging(value);
                ReportPropertyChanging("email");
                _email = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("email");
                OnemailChanged();
            }
        }
        private global::System.String _email;
        partial void OnemailChanging(global::System.String value);
        partial void OnemailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid guid
        {
            get
            {
                return _guid;
            }
            set
            {
                OnguidChanging(value);
                ReportPropertyChanging("guid");
                _guid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("guid");
                OnguidChanged();
            }
        }
        private global::System.Guid _guid;
        partial void OnguidChanging(global::System.Guid value);
        partial void OnguidChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbPlayer_dbAccount", "dbPlayers")]
        public EntityCollection<dbPlayer> dbPlayers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbPlayer>("SolModel.FK_dbPlayer_dbAccount", "dbPlayers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbPlayer>("SolModel.FK_dbPlayer_dbAccount", "dbPlayers", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbBiome")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbBiome : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbBiome object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static dbBiome CreatedbBiome(global::System.Int32 id, global::System.String name)
        {
            dbBiome dbBiome = new dbBiome();
            dbBiome.id = id;
            dbBiome.name = name;
            return dbBiome;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbBiomeTile_dbBiome", "dbBiomeTiles")]
        public EntityCollection<dbBiomeTile> dbBiomeTiles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbBiomeTile>("SolModel.FK_dbBiomeTile_dbBiome", "dbBiomeTiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbBiomeTile>("SolModel.FK_dbBiomeTile_dbBiome", "dbBiomeTiles", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbBiomeTile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbBiomeTile : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbBiomeTile object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="biome_id">Initial value of the biome_id property.</param>
        /// <param name="tile_id">Initial value of the tile_id property.</param>
        public static dbBiomeTile CreatedbBiomeTile(global::System.Int32 id, global::System.Int32 biome_id, global::System.Int32 tile_id)
        {
            dbBiomeTile dbBiomeTile = new dbBiomeTile();
            dbBiomeTile.id = id;
            dbBiomeTile.biome_id = biome_id;
            dbBiomeTile.tile_id = tile_id;
            return dbBiomeTile;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 biome_id
        {
            get
            {
                return _biome_id;
            }
            set
            {
                Onbiome_idChanging(value);
                ReportPropertyChanging("biome_id");
                _biome_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("biome_id");
                Onbiome_idChanged();
            }
        }
        private global::System.Int32 _biome_id;
        partial void Onbiome_idChanging(global::System.Int32 value);
        partial void Onbiome_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 tile_id
        {
            get
            {
                return _tile_id;
            }
            set
            {
                Ontile_idChanging(value);
                ReportPropertyChanging("tile_id");
                _tile_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("tile_id");
                Ontile_idChanged();
            }
        }
        private global::System.Int32 _tile_id;
        partial void Ontile_idChanging(global::System.Int32 value);
        partial void Ontile_idChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbBiomeTile_dbBiome", "dbBiomes")]
        public dbBiome dbBiome
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbBiome>("SolModel.FK_dbBiomeTile_dbBiome", "dbBiomes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbBiome>("SolModel.FK_dbBiomeTile_dbBiome", "dbBiomes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbBiome> dbBiomeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbBiome>("SolModel.FK_dbBiomeTile_dbBiome", "dbBiomes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbBiome>("SolModel.FK_dbBiomeTile_dbBiome", "dbBiomes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbBiomeTile_dbTile", "dbTiles")]
        public dbTile dbTile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTile>("SolModel.FK_dbBiomeTile_dbTile", "dbTiles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTile>("SolModel.FK_dbBiomeTile_dbTile", "dbTiles").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbTile> dbTileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTile>("SolModel.FK_dbBiomeTile_dbTile", "dbTiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbTile>("SolModel.FK_dbBiomeTile_dbTile", "dbTiles", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbCelestial")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbCelestial : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbCelestial object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="width">Initial value of the width property.</param>
        /// <param name="height">Initial value of the height property.</param>
        /// <param name="x">Initial value of the x property.</param>
        /// <param name="y">Initial value of the y property.</param>
        /// <param name="type_id">Initial value of the type_id property.</param>
        public static dbCelestial CreatedbCelestial(global::System.Int32 id, global::System.String name, global::System.Int32 width, global::System.Int32 height, global::System.Int32 x, global::System.Int32 y, global::System.Int32 type_id)
        {
            dbCelestial dbCelestial = new dbCelestial();
            dbCelestial.id = id;
            dbCelestial.name = name;
            dbCelestial.width = width;
            dbCelestial.height = height;
            dbCelestial.x = x;
            dbCelestial.y = y;
            dbCelestial.type_id = type_id;
            return dbCelestial;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 width
        {
            get
            {
                return _width;
            }
            set
            {
                OnwidthChanging(value);
                ReportPropertyChanging("width");
                _width = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("width");
                OnwidthChanged();
            }
        }
        private global::System.Int32 _width;
        partial void OnwidthChanging(global::System.Int32 value);
        partial void OnwidthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 height
        {
            get
            {
                return _height;
            }
            set
            {
                OnheightChanging(value);
                ReportPropertyChanging("height");
                _height = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("height");
                OnheightChanged();
            }
        }
        private global::System.Int32 _height;
        partial void OnheightChanging(global::System.Int32 value);
        partial void OnheightChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 x
        {
            get
            {
                return _x;
            }
            set
            {
                OnxChanging(value);
                ReportPropertyChanging("x");
                _x = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("x");
                OnxChanged();
            }
        }
        private global::System.Int32 _x;
        partial void OnxChanging(global::System.Int32 value);
        partial void OnxChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 y
        {
            get
            {
                return _y;
            }
            set
            {
                OnyChanging(value);
                ReportPropertyChanging("y");
                _y = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("y");
                OnyChanged();
            }
        }
        private global::System.Int32 _y;
        partial void OnyChanging(global::System.Int32 value);
        partial void OnyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 type_id
        {
            get
            {
                return _type_id;
            }
            set
            {
                Ontype_idChanging(value);
                ReportPropertyChanging("type_id");
                _type_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("type_id");
                Ontype_idChanged();
            }
        }
        private global::System.Int32 _type_id;
        partial void Ontype_idChanging(global::System.Int32 value);
        partial void Ontype_idChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbCelestial_dbCelestialType", "dbCelestialTypes")]
        public dbCelestialType dbCelestialType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbCelestialType>("SolModel.FK_dbCelestial_dbCelestialType", "dbCelestialTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbCelestialType>("SolModel.FK_dbCelestial_dbCelestialType", "dbCelestialTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbCelestialType> dbCelestialTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbCelestialType>("SolModel.FK_dbCelestial_dbCelestialType", "dbCelestialTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbCelestialType>("SolModel.FK_dbCelestial_dbCelestialType", "dbCelestialTypes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbLocations_dbCelestial", "dbLocations")]
        public EntityCollection<dbLocation> dbLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbLocation>("SolModel.FK_dbLocations_dbCelestial", "dbLocations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbLocation>("SolModel.FK_dbLocations_dbCelestial", "dbLocations", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbCelestialType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbCelestialType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbCelestialType object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="isworld">Initial value of the isworld property.</param>
        public static dbCelestialType CreatedbCelestialType(global::System.Int32 id, global::System.String name, global::System.Boolean isworld)
        {
            dbCelestialType dbCelestialType = new dbCelestialType();
            dbCelestialType.id = id;
            dbCelestialType.name = name;
            dbCelestialType.isworld = isworld;
            return dbCelestialType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean isworld
        {
            get
            {
                return _isworld;
            }
            set
            {
                OnisworldChanging(value);
                ReportPropertyChanging("isworld");
                _isworld = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("isworld");
                OnisworldChanged();
            }
        }
        private global::System.Boolean _isworld;
        partial void OnisworldChanging(global::System.Boolean value);
        partial void OnisworldChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbCelestial_dbCelestialType", "dbCelestials")]
        public EntityCollection<dbCelestial> dbCelestials
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbCelestial>("SolModel.FK_dbCelestial_dbCelestialType", "dbCelestials");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbCelestial>("SolModel.FK_dbCelestial_dbCelestialType", "dbCelestials", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbCelestialTypeBiome")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbCelestialTypeBiome : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbCelestialTypeBiome object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="celestialtype_id">Initial value of the celestialtype_id property.</param>
        /// <param name="biome_id">Initial value of the biome_id property.</param>
        public static dbCelestialTypeBiome CreatedbCelestialTypeBiome(global::System.Int32 id, global::System.Int32 celestialtype_id, global::System.Int32 biome_id)
        {
            dbCelestialTypeBiome dbCelestialTypeBiome = new dbCelestialTypeBiome();
            dbCelestialTypeBiome.id = id;
            dbCelestialTypeBiome.celestialtype_id = celestialtype_id;
            dbCelestialTypeBiome.biome_id = biome_id;
            return dbCelestialTypeBiome;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 celestialtype_id
        {
            get
            {
                return _celestialtype_id;
            }
            set
            {
                Oncelestialtype_idChanging(value);
                ReportPropertyChanging("celestialtype_id");
                _celestialtype_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("celestialtype_id");
                Oncelestialtype_idChanged();
            }
        }
        private global::System.Int32 _celestialtype_id;
        partial void Oncelestialtype_idChanging(global::System.Int32 value);
        partial void Oncelestialtype_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 biome_id
        {
            get
            {
                return _biome_id;
            }
            set
            {
                Onbiome_idChanging(value);
                ReportPropertyChanging("biome_id");
                _biome_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("biome_id");
                Onbiome_idChanged();
            }
        }
        private global::System.Int32 _biome_id;
        partial void Onbiome_idChanging(global::System.Int32 value);
        partial void Onbiome_idChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbLocation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbLocation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbLocation object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="celestial_id">Initial value of the celestial_id property.</param>
        /// <param name="tile_id">Initial value of the tile_id property.</param>
        /// <param name="x">Initial value of the x property.</param>
        /// <param name="y">Initial value of the y property.</param>
        public static dbLocation CreatedbLocation(global::System.Int32 id, global::System.Int32 celestial_id, global::System.Int32 tile_id, global::System.Int32 x, global::System.Int32 y)
        {
            dbLocation dbLocation = new dbLocation();
            dbLocation.id = id;
            dbLocation.celestial_id = celestial_id;
            dbLocation.tile_id = tile_id;
            dbLocation.x = x;
            dbLocation.y = y;
            return dbLocation;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 celestial_id
        {
            get
            {
                return _celestial_id;
            }
            set
            {
                Oncelestial_idChanging(value);
                ReportPropertyChanging("celestial_id");
                _celestial_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("celestial_id");
                Oncelestial_idChanged();
            }
        }
        private global::System.Int32 _celestial_id;
        partial void Oncelestial_idChanging(global::System.Int32 value);
        partial void Oncelestial_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 tile_id
        {
            get
            {
                return _tile_id;
            }
            set
            {
                Ontile_idChanging(value);
                ReportPropertyChanging("tile_id");
                _tile_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("tile_id");
                Ontile_idChanged();
            }
        }
        private global::System.Int32 _tile_id;
        partial void Ontile_idChanging(global::System.Int32 value);
        partial void Ontile_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 x
        {
            get
            {
                return _x;
            }
            set
            {
                OnxChanging(value);
                ReportPropertyChanging("x");
                _x = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("x");
                OnxChanged();
            }
        }
        private global::System.Int32 _x;
        partial void OnxChanging(global::System.Int32 value);
        partial void OnxChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 y
        {
            get
            {
                return _y;
            }
            set
            {
                OnyChanging(value);
                ReportPropertyChanging("y");
                _y = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("y");
                OnyChanged();
            }
        }
        private global::System.Int32 _y;
        partial void OnyChanging(global::System.Int32 value);
        partial void OnyChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbLocations_dbCelestial", "dbCelestials")]
        public dbCelestial dbCelestial
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbCelestial>("SolModel.FK_dbLocations_dbCelestial", "dbCelestials").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbCelestial>("SolModel.FK_dbLocations_dbCelestial", "dbCelestials").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbCelestial> dbCelestialReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbCelestial>("SolModel.FK_dbLocations_dbCelestial", "dbCelestials");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbCelestial>("SolModel.FK_dbLocations_dbCelestial", "dbCelestials", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbLocations_dbTile", "dbTiles")]
        public dbTile dbTile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTile>("SolModel.FK_dbLocations_dbTile", "dbTiles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTile>("SolModel.FK_dbLocations_dbTile", "dbTiles").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbTile> dbTileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTile>("SolModel.FK_dbLocations_dbTile", "dbTiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbTile>("SolModel.FK_dbLocations_dbTile", "dbTiles", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbPlayer_dbLocation", "dbPlayers")]
        public EntityCollection<dbPlayer> dbPlayers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbPlayer>("SolModel.FK_dbPlayer_dbLocation", "dbPlayers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbPlayer>("SolModel.FK_dbPlayer_dbLocation", "dbPlayers", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbPlayer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbPlayer : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbPlayer object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="owner_id">Initial value of the owner_id property.</param>
        /// <param name="location_id">Initial value of the location_id property.</param>
        public static dbPlayer CreatedbPlayer(global::System.Int32 id, global::System.String name, global::System.Int32 owner_id, global::System.Int32 location_id)
        {
            dbPlayer dbPlayer = new dbPlayer();
            dbPlayer.id = id;
            dbPlayer.name = name;
            dbPlayer.owner_id = owner_id;
            dbPlayer.location_id = location_id;
            return dbPlayer;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 owner_id
        {
            get
            {
                return _owner_id;
            }
            set
            {
                Onowner_idChanging(value);
                ReportPropertyChanging("owner_id");
                _owner_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("owner_id");
                Onowner_idChanged();
            }
        }
        private global::System.Int32 _owner_id;
        partial void Onowner_idChanging(global::System.Int32 value);
        partial void Onowner_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 location_id
        {
            get
            {
                return _location_id;
            }
            set
            {
                Onlocation_idChanging(value);
                ReportPropertyChanging("location_id");
                _location_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("location_id");
                Onlocation_idChanged();
            }
        }
        private global::System.Int32 _location_id;
        partial void Onlocation_idChanging(global::System.Int32 value);
        partial void Onlocation_idChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbPlayer_dbAccount", "dbAccounts")]
        public dbAccount dbAccount
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbAccount>("SolModel.FK_dbPlayer_dbAccount", "dbAccounts").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbAccount>("SolModel.FK_dbPlayer_dbAccount", "dbAccounts").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbAccount> dbAccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbAccount>("SolModel.FK_dbPlayer_dbAccount", "dbAccounts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbAccount>("SolModel.FK_dbPlayer_dbAccount", "dbAccounts", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbPlayer_dbLocation", "dbLocations")]
        public dbLocation dbLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbLocation>("SolModel.FK_dbPlayer_dbLocation", "dbLocations").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbLocation>("SolModel.FK_dbPlayer_dbLocation", "dbLocations").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbLocation> dbLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbLocation>("SolModel.FK_dbPlayer_dbLocation", "dbLocations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbLocation>("SolModel.FK_dbPlayer_dbLocation", "dbLocations", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbTile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbTile : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbTile object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="type_id">Initial value of the type_id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="description">Initial value of the description property.</param>
        /// <param name="prefab">Initial value of the prefab property.</param>
        public static dbTile CreatedbTile(global::System.Int32 id, global::System.Int32 type_id, global::System.String name, global::System.String description, global::System.String prefab)
        {
            dbTile dbTile = new dbTile();
            dbTile.id = id;
            dbTile.type_id = type_id;
            dbTile.name = name;
            dbTile.description = description;
            dbTile.prefab = prefab;
            return dbTile;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 type_id
        {
            get
            {
                return _type_id;
            }
            set
            {
                Ontype_idChanging(value);
                ReportPropertyChanging("type_id");
                _type_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("type_id");
                Ontype_idChanged();
            }
        }
        private global::System.Int32 _type_id;
        partial void Ontype_idChanging(global::System.Int32 value);
        partial void Ontype_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String prefab
        {
            get
            {
                return _prefab;
            }
            set
            {
                OnprefabChanging(value);
                ReportPropertyChanging("prefab");
                _prefab = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("prefab");
                OnprefabChanged();
            }
        }
        private global::System.String _prefab;
        partial void OnprefabChanging(global::System.String value);
        partial void OnprefabChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbBiomeTile_dbTile", "dbBiomeTiles")]
        public EntityCollection<dbBiomeTile> dbBiomeTiles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbBiomeTile>("SolModel.FK_dbBiomeTile_dbTile", "dbBiomeTiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbBiomeTile>("SolModel.FK_dbBiomeTile_dbTile", "dbBiomeTiles", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_dbLocations_dbTile", "dbLocations")]
        public EntityCollection<dbLocation> dbLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbLocation>("SolModel.FK_dbLocations_dbTile", "dbLocations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbLocation>("SolModel.FK_dbLocations_dbTile", "dbLocations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_Tile_TileType", "dbTileTypes")]
        public dbTileType dbTileType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTileType>("SolModel.FK_Tile_TileType", "dbTileTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTileType>("SolModel.FK_Tile_TileType", "dbTileTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<dbTileType> dbTileTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<dbTileType>("SolModel.FK_Tile_TileType", "dbTileTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<dbTileType>("SolModel.FK_Tile_TileType", "dbTileTypes", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="dbTileType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class dbTileType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new dbTileType object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static dbTileType CreatedbTileType(global::System.Int32 id, global::System.String name)
        {
            dbTileType dbTileType = new dbTileType();
            dbTileType.id = id;
            dbTileType.name = name;
            return dbTileType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SolModel", "FK_Tile_TileType", "dbTiles")]
        public EntityCollection<dbTile> dbTiles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<dbTile>("SolModel.FK_Tile_TileType", "dbTiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<dbTile>("SolModel.FK_Tile_TileType", "dbTiles", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SolModel", Name="sysdiagram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagram : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sysdiagram object.
        /// </summary>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="principal_id">Initial value of the principal_id property.</param>
        /// <param name="diagram_id">Initial value of the diagram_id property.</param>
        public static sysdiagram Createsysdiagram(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagram sysdiagram = new sysdiagram();
            sysdiagram.name = name;
            sysdiagram.principal_id = principal_id;
            sysdiagram.diagram_id = diagram_id;
            return sysdiagram;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    
    }

    #endregion

    
}
